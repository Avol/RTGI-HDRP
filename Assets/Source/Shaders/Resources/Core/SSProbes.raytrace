#include "../Raytracing.cginc"
#include "../Octahedron.cginc"

//--------------------------------------------------------------------------------------------------
// Included headers
//--------------------------------------------------------------------------------------------------

// Don't want contact shadows
#define LIGHT_EVALUATION_NO_CONTACT_SHADOWS // To define before LightEvaluation.hlsl
// #define LIGHT_EVALUATION_NO_HEIGHT_FOG

#ifndef LIGHTLOOP_DISABLE_TILE_AND_CLUSTER
    #define USE_BIG_TILE_LIGHTLIST
#endif

#define PREFER_HALF             0
#define GROUP_SIZE_1D           8
#define SHADOW_USE_DEPTH_BIAS   0 // Too expensive, not particularly effective
#define SHADOW_ULTRA_LOW          // Different options are too expensive.
#define AREA_SHADOW_LOW           // Different options are too expensive.
#define SHADOW_AUTO_FLIP_NORMAL 0 // No normal information, so no need to flip
#define SHADOW_VIEW_BIAS        1 // Prevents light leaking through thin geometry. Not as good as normal bias at grazing angles, but cheaper and independent from the geometry.
#define USE_DEPTH_BUFFER        1 // Accounts for opaque geometry along the camera ray
#define SAMPLE_PROBE_VOLUMES    1 && (defined(PROBE_VOLUMES_L1) || defined(PROBE_VOLUMES_L2))

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Filtering.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/VolumeRendering.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/EntityLighting.hlsl"

// We need to include this "for reasons"...
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"

#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"

#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Sky/PhysicallyBasedSky/PhysicallyBasedSkyCommon.hlsl"

#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightEvaluation.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"


RaytracingAccelerationStructure _RaytracingAccelerationStructure;

#pragma max_recursion_depth 1

#define SHADER_TARGET 50

uniform bool _TestTracingLanes;
Texture2D<half>			_SSProbesRayAtlas;
Texture2D<half>			_SSProbesLightingPDF;
RWTexture2D<float4>		_SSProbes;

uniform				int			_Frame;
uniform				int			_RayCount;

uniform				int			_ProbeSize;
uniform				int			_Upscale;
uniform				float		_RayConeAngle;
uniform				float		_MaxRayDistance;
uniform				bool		_TraceJitter;
uniform				float2		_ScreenResolution;
uniform				float		_BounceDistance;
uniform				float		_TemporalWeight;
uniform				bool		_ImportanceSampling;
uniform				float		_Exposure;
uniform				bool		_NormalWeight;

uniform				bool		_UseShadowMaps;

// Retrieves world space normal and linear depth.
// @ positionCS = screen space UV coordinate.
float4 GetNormalDepth(float2 positionCS, out float3 worldPosition)
{
	float4 normalDepth = 0;

	// load normal
	NormalData normalData;
	DecodeFromNormalBuffer(positionCS, normalData);
	normalDepth.xyz = normalData.normalWS;


	// load depth
	float			depth = LoadCameraDepth(positionCS);
	PositionInputs	posInput = GetPositionInput(positionCS, _ScreenSize.zw, depth, UNITY_MATRIX_I_VP, UNITY_MATRIX_V);
	normalDepth.w = posInput.linearDepth;

	worldPosition = posInput.positionWS + _WorldSpaceCameraPos;

	return normalDepth;
}

//  Compare probe vs pixel distance and normal.
//
int DistancePlaneWeighting(float3 fromNormal, float3 fromWorldPosition, float fromDepth, float3 toWorldPosition)
{
	float4	probeScenePlane				= float4(fromNormal, dot(fromWorldPosition, fromNormal));
	float	planeDistance				= abs(dot(float4(toWorldPosition, -1), probeScenePlane));
	float	relativeDepthDifference		= planeDistance / fromDepth;

	return exp2(-100000 * (relativeDepthDifference * relativeDepthDifference)) > .1 ? 1.0 : 0.0;
}

//  Compare probe vs pixel distance and normal.
//
float DistancePlaneWeighting2(float3 fromNormal, float3 fromWorldPosition, float fromDepth, float3 toWorldPosition)
{
	float4	probeScenePlane				= float4(fromNormal, dot(fromWorldPosition, fromNormal));

	float	planeDistance				= abs(dot(float4(toWorldPosition, -1), probeScenePlane));
	float	relativeDepthDifference		= planeDistance / fromDepth;

	return exp2(-100000 * (relativeDepthDifference * relativeDepthDifference));
}

int traceShadow(float3 worldPos)
{
	DirectionalLightData light = _DirectionalLightDatas[_DirectionalShadowIndex];

	// Create the ray descriptor for this pixel
	RayDesc rayDescriptor;
	rayDescriptor.TMin			= 0;
	rayDescriptor.TMax			= _MaxRayDistance;
	rayDescriptor.Origin		= worldPos + light.forward;
	rayDescriptor.Direction		= -light.forward;

	// Create and init the RayIntersection structure for this
	RayPayload	rayIntersection;
	rayIntersection.color				= 0;
	rayIntersection.distance			= -1;

	TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_CULL_BACK_FACING_TRIANGLES, RAYTRACING_OPAQUE_FLAG, 0, 1, 0, rayDescriptor, rayIntersection);

	return rayIntersection.distance != -1 ? 0 : 1;
}


float3 LightLoop(float3 positionWS, float3 normalWS)
{
	LightLoopContext context;
	context.shadowContext    = InitShadowContext();
    context.shadowValue      = 1;
    context.sampleReflection = 0;
    context.splineVisibility = -1;
	 
	float3 color = 0;

	if (_DirectionalShadowIndex >= 0)
    {
		BuiltinData unused; // Unused for now, so define once
		ZERO_INITIALIZE(BuiltinData, unused);

		DirectionalLightData light = _DirectionalLightDatas[_DirectionalShadowIndex];

		float3 L = -light.forward;

		float dotNL = dot(L, normalWS); // should use BRDF I guess.

		if (dotNL > 0) // skip if facing wrong way.
		{
			PositionInputs posInput;
			posInput.positionWS = positionWS - _WorldSpaceCameraPos;
			posInput.positionSS = 0;
			float3 normalWS		= 0;

			// NOTE:	if point outside of camera view, outside of shadow view, do traced shadow. 
			//			this will probably not improve performance due to tracing lanes paralelization.
			// NOTE:	tracing is probably not needed for non directional lights.
			if (_UseShadowMaps)
			{
				context.shadowValue =	GetDirectionalShadowAttenuation(context.shadowContext,
																		posInput.positionSS, posInput.positionWS, normalWS,
																		light.shadowIndex, L);
			}
			else
			{
				//context.shadowValue = traceShadow(positionWS);
			}


			SHADOW_TYPE shadow = EvaluateShadow_Directional(context, posInput, light, unused, normalWS);
			color += ComputeShadowColor(shadow, light.shadowTint, light.penumbraTint) * light.color;// * dotNL;
		}
	}

	return color;
}


//
//
//
float4 trace(uint seed, float3 worldPos, float3 normal, float3 octaRay)
{
	const uint rayCount = _RayCount;
	float invCone = 1.0 - _RayConeAngle;

	float4		radiance	= 0;
	int			countRays	= 0;

	for (int i = 0; i < _RayCount; i++)
	{
		float3 jitteredOctaRay = normalize(octaRay * invCone + getCosHemisphereSample(seed, octaRay) * _RayConeAngle);

		if (dot(normal, jitteredOctaRay) <= 0.01)
			return 0;

		// Create the ray descriptor for this pixel
		RayDesc rayDescriptor;
		rayDescriptor.TMin			= 0;
		rayDescriptor.TMax			= _MaxRayDistance;
		rayDescriptor.Direction		= jitteredOctaRay;
		rayDescriptor.Origin		= worldPos + jitteredOctaRay * 0.01; //  normal * 0.0001;

		// Create and init the RayIntersection structure for this
		RayPayload	rayIntersection;
		rayIntersection.color				= 0;
		rayIntersection.distance			= 0;

		TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_CULL_BACK_FACING_TRIANGLES, RAYTRACING_OPAQUE_FLAG, 0, 1, 0, rayDescriptor, rayIntersection);

		if (rayIntersection.distance < 0.0001)
			continue;

		float3	hitPosition		= worldPos + jitteredOctaRay * (rayIntersection.distance - 0.0001);

		float	emissionLuminance	= Luminance(rayIntersection.emission);

		float3	lightLoop			= emissionLuminance < 1 ? LightLoop(hitPosition, rayIntersection.normal) * (1.0f - emissionLuminance) : 0;
		float	distanceWeight		= max(0, 1.0 - min(1, rayIntersection.distance) / _MaxRayDistance - (1.0 - _BounceDistance));


		float3	diffuse		= rayIntersection.color * lightLoop * distanceWeight;
		float3  emission	= rayIntersection.emission * distanceWeight;

		radiance += float4((diffuse + emission) * GetCurrentExposureMultiplier(), rayIntersection.distance / _MaxRayDistance);
		countRays++;
	}

	if (countRays == 0)
		return 0;
	 
	return radiance / countRays;
}

[shader("raygeneration")]
void SSRadiance()
{
	// current pixel
	uint2	dispatchIdx		= DispatchRaysIndex().xy;
	float2	resolution		= DispatchRaysDimensions().xy;

	uint2	probeCS			= (dispatchIdx.xy - dispatchIdx.xy % _ProbeSize);


	if (_TraceJitter)
	{
		float2	jitter				= float2(	random(dispatchIdx.xy / resolution + _Frame),
												random(dispatchIdx.yx / resolution + _Frame)	);
		uint2	jitterUint2			= min(_ProbeSize - 1, floor(jitter * _ProbeSize));

		probeCS	+= jitterUint2;// / _Upscale;
		probeCS	= min(probeCS, _ScreenResolution - 1);	// clamp jiterred position to screen resolution
	}

	float3 worldPosition	= 0;
	float4 normalDepth		= GetNormalDepth(probeCS, worldPosition);

	// TODO: jitter random available slots rather clamp to original point.
	if (_TraceJitter)
	{
		uint2   positionCSNonJittered			= (dispatchIdx.xy - dispatchIdx.xy % _ProbeSize);

		float3	worldPositionNonJittered		= 0;
		float4	normalDepthNonJittered			= GetNormalDepth(positionCSNonJittered, worldPositionNonJittered);

		float	weight							= DistancePlaneWeighting2(normalDepth.xyz, worldPosition, normalDepth.w, worldPositionNonJittered);

		if (_NormalWeight)
		{
			float normalWeight = max(0, dot(normalDepthNonJittered.xyz, normalDepth.xyz));
			if (weight > normalWeight)
				weight = normalWeight;
		}

		if (weight <= 0.1)
		{
			worldPosition	= worldPositionNonJittered;
			normalDepth		= normalDepthNonJittered;
		}
	}

	// get octahedral ray direction.
	float2	octaUV = 0;
	if (_ImportanceSampling)
	{
		uint rayIndex	= _SSProbesRayAtlas[dispatchIdx] * 255;
		octaUV	= UnpackRay(rayIndex);
	}
	else
	{
		octaUV	= dispatchIdx.xy % _ProbeSize;
	}
	float3	octaRay		= UVtoOctahedron((octaUV + 0.5) / _ProbeSize);

	// trace
	uint	seed					= initRand(probeCS.x, probeCS.y) + initRand(_Frame, _Frame);
	_SSProbes[dispatchIdx]			= max(0, min(1, trace(seed, worldPosition, normalDepth.xyz, octaRay)));
}

[shader("miss")]
void MissShader(inout RayPayload rayIntersection : SV_RayPayload)
{ 
	rayIntersection.color			= float3(0, 0, 0);
	rayIntersection.distance		= -1;
}