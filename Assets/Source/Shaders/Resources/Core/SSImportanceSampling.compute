#pragma kernel SSImportanceSamplingHistoryBRDF
#pragma kernel SSImportanceSamplingHistoryLightning
#pragma kernel SSImportanceSamplingPackRays
#pragma kernel SSImportanceSamplingUnpackRadiance

#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/RenderPass/CustomPass/CustomPassCommon.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"

#include "../Octahedron.cginc"
#include "../Common.cginc"

Texture2D<float4>		_SSProbes;
RWTexture2D<float4>		_SSProbesUnpacked;

RWTexture2D<half>		_SSProbesSurfaceBRDF;
RWTexture2D<half>		_SSProbesLightingPDF;
RWTexture2D<half>		_SSProbesRayAtlas;
RWTexture2D<half>		_SSProbesRayAtlasLoc;

uniform int _ProbeSize;

// Retrieves world space normal and linear depth.
// @ positionCS = screen space UV coordinate.
float4 GetNormalDepth(float2 positionCS, out float3 worldPosition)
{
	float4 normalDepth = 0;

	// load normal
	NormalData normalData;
	DecodeFromNormalBuffer(positionCS, normalData);
	normalDepth.xyz = normalData.normalWS;


	// load depth
	float			depth = LoadCameraDepth(positionCS);
	PositionInputs	posInput = GetPositionInput(positionCS, _ScreenSize.zw, depth, UNITY_MATRIX_I_VP, UNITY_MATRIX_V);
	normalDepth.w = posInput.linearDepth;

	worldPosition = posInput.positionWS + _WorldSpaceCameraPos;

	return normalDepth;
}

// TODO: history reprojection
[numthreads(8, 8, 1)]
void SSImportanceSamplingHistoryBRDF(uint3 id : SV_DispatchThreadID)
{
	uint2	octaUV					= id.xy % _ProbeSize;
	uint2	probeCS					= id.xy - octaUV;
	uint	sharedGroupIndex		= PackRay(octaUV);

	float3	worldPosition			= 0;
	float4	normalDepth				= GetNormalDepth(probeCS, worldPosition);

	float3	octaRay					= UVtoOctahedron((octaUV + 0.5) / _ProbeSize);
	float	BRDF					= max(0, dot(octaRay, normalDepth.xyz));

	_SSProbesSurfaceBRDF[id.xy]		= BRDF;
}

// TODO: history reprojection
[numthreads(8,8,1)]
void SSImportanceSamplingHistoryLightning(uint3 id : SV_DispatchThreadID)
{
	_SSProbesLightingPDF[id.xy]		= lerp(_SSProbesLightingPDF[id.xy], Luminance(_SSProbes[id.xy].xyz), 0.25f);
}

groupshared half	_UnsortedPDFRays[8 * 8];	// pdf.
groupshared uint	_SortedPDFRays[8 * 8];		// ray index.
groupshared float	_SortedPDF[8 * 8];			// pdf.

[numthreads(8, 8, 1)]
void SSImportanceSamplingPackRays(uint3 id : SV_DispatchThreadID)
{
	uint2		octaUV					= id.xy % _ProbeSize;
	uint		rayIndex				= PackRay(octaUV);

	float		surfaceBRDF				= _SSProbesSurfaceBRDF[id.xy];
	float		lightningPDF			= _SSProbesLightingPDF[id.xy];

	float		cullPDFThreshold = 0.1f;


	if (surfaceBRDF < cullPDFThreshold)
	{
		_UnsortedPDFRays[rayIndex] = 0;
	}
	else
	{
		_UnsortedPDFRays[rayIndex] = surfaceBRDF * max(0.01, lightningPDF);
	}

	GroupMemoryBarrierWithGroupSync();

	// o2 parallel sort
	uint raysMore = 0;
	uint raysSame = 0;

	for (uint c = 0; c < 64; c++)
	{
		if (rayIndex != c)
		{
			if (_UnsortedPDFRays[rayIndex] < _UnsortedPDFRays[c])
				raysMore++;

			else if (_UnsortedPDFRays[rayIndex] == _UnsortedPDFRays[c] && rayIndex <= c)
				raysSame++;
		}
	}

	_SortedPDFRays[raysMore + raysSame]		= rayIndex;

	GroupMemoryBarrierWithGroupSync();


	_SSProbesRayAtlasLoc[id.xy] = (raysMore + raysSame) / 255.0f;

	if (rayIndex < 32)
	{
		_SSProbesRayAtlas[id.xy] = _SortedPDFRays[rayIndex] / 255.0f;
	}
	else
	{
		if (rayIndex == 63)
		{
			_SSProbesRayAtlas[id.xy] = 63 / 255.0f;
		}
		else
		{
			_SSProbesRayAtlas[id.xy] = _SortedPDFRays[floor((rayIndex - 32) / 3)] / 255.0f;
		}
	}
}

[numthreads(8, 8, 1)]
void SSImportanceSamplingUnpackRadiance(uint3 id : SV_DispatchThreadID)
{
	uint2	octahedralRay	= id.xy % _ProbeSize;
	uint2	probeCS			= id.xy - octahedralRay;

	uint	rayIndex			= _SSProbesRayAtlas[id.xy] * 255;
	uint	octaTargetIndex		= _SSProbesRayAtlasLoc[id.xy] * 255;

	uint2	atlasRay			= UnpackRay(rayIndex);
	uint2	probeAtlasIndex		= probeCS + atlasRay;


	uint	ray0				= PackRay(octahedralRay);

	 

	uint2	targetAtlasLoc		= probeCS + UnpackRay(octaTargetIndex);


	if (octaTargetIndex < 32)
	{
		if (octaTargetIndex < 10)
		{
			float4 rad0 = _SSProbes[targetAtlasLoc];

			uint offset = 32 + octaTargetIndex * 3;
			uint2 loc1 = UnpackRay(offset);
			uint2 loc2 = UnpackRay(offset + 1);
			uint2 loc3 = UnpackRay(offset + 2);

			float4 rad1 = _SSProbes[probeCS + loc1];
			float4 rad2 = _SSProbes[probeCS + loc2];
			float4 rad3 = _SSProbes[probeCS + loc3];

			_SSProbesUnpacked[id.xy] = (rad0 + rad1 + rad2 + rad3) * 0.25f;
		}
		else
		{
			_SSProbesUnpacked[id.xy] = _SSProbes[targetAtlasLoc];
		}
	}
	else
	{
		_SSProbesUnpacked[id.xy] = 0;
	}
}