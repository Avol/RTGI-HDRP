//#include "../Common.cginc"

// We do not rely on recursion, beyond shooting shadow and random walk rays from the intersected surface
#pragma max_recursion_depth 2

// Include and define the shader pass
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
#define SHADERPASS SHADERPASS_RAYTRACING

// HDRP include
#define SHADER_TARGET 50
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Macros.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/HDStencilUsage.cs.hlsl"

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/BSDF.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/PreIntegratedFGD/PreIntegratedFGD.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/ImageBasedLighting.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightEvaluation.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialEvaluation.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariablesGlobal.hlsl"

// Raytracing includes
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingLightCluster.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingSampling.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Common/RaytracingHelpers.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/ScreenSpaceLighting/ScreenSpaceLighting.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Common/AtmosphericScatteringRayTracing.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/RayCountManager.cs.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/RayTracingFallbackHierarchy.cs.hlsl"

// GI includes
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinGIUtilities.hlsl"
#include "Packages/com.unity.render-pipelines.core/Runtime/Lighting/ProbeVolume/ProbeVolume.hlsl"

RWTexture2D<float4>		_ProbesDepthNormal;

uniform				float3		_CameraPosition;
uniform				float3		_CameraUp;
uniform				float3		_CameraRight;
uniform				float3		_CameraFront;
uniform				float		_CameraAspect;
uniform				float		_CameraFOV;
uniform				float		_CameraNear;
uniform				float		_CameraFar;

uniform				float3		_DirLight;
uniform				float		_Frame;

float3 _CameraPos; 




float LinearizeDepth(float z)
{
    float zc0 = 1.0 - _CameraFar / _CameraNear;
    float zc1 = _CameraFar / _CameraNear;
    return 1.0 / (zc0 * z + zc1);
}

// For Poisson Disk PCF sampling
static const float2 PoissonSamples[64] =
{
    float2(-0.5119625f, -0.4827938f),
    float2(-0.2171264f, -0.4768726f),
    float2(-0.7552931f, -0.2426507f),
    float2(-0.7136765f, -0.4496614f),
    float2(-0.5938849f, -0.6895654f),
    float2(-0.3148003f, -0.7047654f),
    float2(-0.42215f, -0.2024607f),
    float2(-0.9466816f, -0.2014508f),
    float2(-0.8409063f, -0.03465778f),
    float2(-0.6517572f, -0.07476326f),
    float2(-0.1041822f, -0.02521214f),
    float2(-0.3042712f, -0.02195431f),
    float2(-0.5082307f, 0.1079806f),
    float2(-0.08429877f, -0.2316298f),
    float2(-0.9879128f, 0.1113683f),
    float2(-0.3859636f, 0.3363545f),
    float2(-0.1925334f, 0.1787288f),
    float2(0.003256182f, 0.138135f),
    float2(-0.8706837f, 0.3010679f),
    float2(-0.6982038f, 0.1904326f),
    float2(0.1975043f, 0.2221317f),
    float2(0.1507788f, 0.4204168f),
    float2(0.3514056f, 0.09865579f),
    float2(0.1558783f, -0.08460935f),
    float2(-0.0684978f, 0.4461993f),
    float2(0.3780522f, 0.3478679f),
    float2(0.3956799f, -0.1469177f),
    float2(0.5838975f, 0.1054943f),
    float2(0.6155105f, 0.3245716f),
    float2(0.3928624f, -0.4417621f),
    float2(0.1749884f, -0.4202175f),
    float2(0.6813727f, -0.2424808f),
    float2(-0.6707711f, 0.4912741f),
    float2(0.0005130528f, -0.8058334f),
    float2(0.02703013f, -0.6010728f),
    float2(-0.1658188f, -0.9695674f),
    float2(0.4060591f, -0.7100726f),
    float2(0.7713396f, -0.4713659f),
    float2(0.573212f, -0.51544f),
    float2(-0.3448896f, -0.9046497f),
    float2(0.1268544f, -0.9874692f),
    float2(0.7418533f, -0.6667366f),
    float2(0.3492522f, 0.5924662f),
    float2(0.5679897f, 0.5343465f),
    float2(0.5663417f, 0.7708698f),
    float2(0.7375497f, 0.6691415f),
    float2(0.2271994f, -0.6163502f),
    float2(0.2312844f, 0.8725659f),
    float2(0.4216993f, 0.9002838f),
    float2(0.4262091f, -0.9013284f),
    float2(0.2001408f, -0.808381f),
    float2(0.149394f, 0.6650763f),
    float2(-0.09640376f, 0.9843736f),
    float2(0.7682328f, -0.07273844f),
    float2(0.04146584f, 0.8313184f),
    float2(0.9705266f, -0.1143304f),
    float2(0.9670017f, 0.1293385f),
    float2(0.9015037f, -0.3306949f),
    float2(-0.5085648f, 0.7534177f),
    float2(0.9055501f, 0.3758393f),
    float2(0.7599946f, 0.1809109f),
    float2(-0.2483695f, 0.7942952f),
    float2(-0.4241052f, 0.5581087f),
    float2(-0.1020106f, 0.6724468f),
};

#define RAYTRACING_OPAQUE_FLAG      0x0f
#define RAYTRACING_TRANSPARENT_FLAG 0xf0

[shader("raygeneration")]
void MyRaygenShader()
{
	// current pixel
	uint2	dispatchIdx		= DispatchRaysIndex().xy;
	float2	resolution		= DispatchRaysDimensions().xy;
	float2	screenUV		= dispatchIdx / resolution;

	//uint pcfOffset = (_Frame + dispatchIdx.x + dispatchIdx.y * resolution.x) % 64;

	//screenUV += PoissonSamples[pcfOffset] / resolution / 4.0;	//random(float2(screenUV.x, screenUV.y + _Frame * 0.01)) / resolution / 2;

	// calculate camera ray
	float2 uv = (screenUV - 0.5f) * _CameraFOV;
	uv.x *= _CameraAspect;
	float3 ray = _CameraUp * uv.y + _CameraRight * uv.x + _CameraFront;



	//float rayBias = EvaluateRayTracingBias(_CameraPosition);

	// Create the ray descriptor for this pixel
    RayDesc rayDescriptor;
    rayDescriptor.Origin		= _CameraPosition + ray * _CameraNear;// * rayBias;
    rayDescriptor.Direction		= ray;
    rayDescriptor.TMin			= 0.0;
    rayDescriptor.TMax			= 1000.0;//_RaytracingRayMaxLength;

    // Adjust world-space position to match the RAS setup with XR single-pass and camera relative
    //ApplyCameraRelativeXR(rayDescriptor.Origin);

    // Create and init the RayIntersection structure for this
    RayIntersection rayIntersection;
    rayIntersection.color				= float3(0.0, 0.0, 0.0);
    rayIntersection.t					= -1.0;
    rayIntersection.remainingDepth		= 1;
    rayIntersection.pixelCoord			= dispatchIdx;
    rayIntersection.sampleIndex			= 0;

	// In order to achieve filtering for the textures, we need to compute the spread angle of the pixel
    //rayIntersection.cone.spreadAngle = 0;
    //rayIntersection.cone.width = 0;

	TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_CULL_BACK_FACING_TRIANGLES, RAYTRACINGRENDERERFLAG_GLOBAL_ILLUMINATION, 0, 1, 0, rayDescriptor, rayIntersection);

	// Clamp the exposed color in HSV space
    rayIntersection.color = RayTracingHSVClamp(rayIntersection.color * GetCurrentExposureMultiplier(), _RaytracingIntensityClamp);

	_ProbesDepthNormal[dispatchIdx]	= float4(rayIntersection.color, 1);

	// init ray decriptor
	/*RayDesc rayDesc;
	rayDesc.Origin		= _CameraPosition + ray * _CameraNear;
	rayDesc.Direction	= ray;
	rayDesc.TMin		= 0;
	rayDesc.TMax		= 1000;

	// init payloud
	RayPayload rayPayload;
	rayPayload.color	= 0;
	rayPayload.normal   = 0;
	rayPayload.distance = 0;

	TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, RAYTRACING_OPAQUE_FLAG, 0, 1, 0, rayDesc, rayPayload);

	_ProbesDepthNormal[dispatchIdx]	= float4(rayPayload.normal, rayPayload.distance / _CameraFar);*/
}


// "back up" closest hit shader. it is used when we hit material without raytracing shader pass
/*[shader("closesthit")]
void ClosestHitMain(inout RayPayload rayPayload : SV_RayPayload, AttributeData attributeData : SV_IntersectionAttributes)
{
	// do pink color as an error
	rayPayload.color	= float3(1, 0.0, 1);
	rayPayload.normal   = 0;
	rayPayload.distance = 0;
}*/

// miss shader, used when we don't hit any geometry
/*[shader("miss")]
void MissShader(inout RayPayload rayPayload : SV_RayPayload)
{ 
	rayPayload.color	= 0;
	rayPayload.normal   = 0;
	rayPayload.distance = 1000;
}*/

[shader("miss")]
void MissShader(inout RayIntersection rayIntersection : SV_RayPayload)
{ 
	rayIntersection.color		= float3(1, 0, 0);
	//rayIntersection.normal		= 0;
	//rayIntersection.distance	= 1000;
}