#pragma kernel SSFiltering

#include "../Octahedron.cginc"
#include "../SH2.cginc"

Texture2D<float4> _SSProbes;

RWTexture3D<float> _SHAtlasR;
RWTexture3D<float> _SHAtlasG;
RWTexture3D<float> _SHAtlasB;

uniform int		_ProbeSize;

[numthreads(8,8,1)]
void SSFiltering(uint3 id : SV_DispatchThreadID)
{
	uint2 index = id.xy * _ProbeSize;

	float4 mixedColor = 0;
	 
	SH9Color shOutput;

	float weightSum	= 0;
	for (int x = 0; x < _ProbeSize; x++)
	{
		for (int y = 0; y < _ProbeSize; y++)
		{
			float2	octaUV		= float2(x, y);
			float3	direction	= UVtoOctahedron((octaUV + 0.5) / _ProbeSize);

			float4	radiance	= _SSProbes[index + uint2(x, y)];

			//if (radiance.w != 0)
			//{
				SH9Color sh9Color = genLightingCoefficientsForNormal(direction, radiance.rgb);

				shOutput.sh0 += sh9Color.sh0;
				shOutput.sh1 += sh9Color.sh1;
				shOutput.sh2 += sh9Color.sh2;
				shOutput.sh3 += sh9Color.sh3;
				shOutput.sh4 += sh9Color.sh4;
				shOutput.sh5 += sh9Color.sh5;
				shOutput.sh6 += sh9Color.sh6;
				shOutput.sh7 += sh9Color.sh7;
				shOutput.sh8 += sh9Color.sh8;

				mixedColor += radiance;
			
				
				weightSum += 1;// luminance(radiance.rgb) * 3;
			//}
		}
	}

	shOutput.sh0 /= max(1, weightSum);
	shOutput.sh1 /= max(1, weightSum);
	shOutput.sh2 /= max(1, weightSum);
	shOutput.sh3 /= max(1, weightSum);
	shOutput.sh4 /= max(1, weightSum);
	shOutput.sh5 /= max(1, weightSum);
	shOutput.sh6 /= max(1, weightSum);
	shOutput.sh7 /= max(1, weightSum);
	shOutput.sh8 /= max(1, weightSum);

	float3 coeff0 = (shOutput.sh0 * 0.5f + 0.5f);
	float3 coeff1 = (shOutput.sh1 * 0.5f + 0.5f);
	float3 coeff2 = (shOutput.sh2 * 0.5f + 0.5f);
	float3 coeff3 = (shOutput.sh3 * 0.5f + 0.5f);
	float3 coeff4 = (shOutput.sh4 * 0.5f + 0.5f);
	float3 coeff5 = (shOutput.sh5 * 0.5f + 0.5f);
	float3 coeff6 = (shOutput.sh6 * 0.5f + 0.5f);
	float3 coeff7 = (shOutput.sh7 * 0.5f + 0.5f);
	float3 coeff8 = (shOutput.sh8 * 0.5f + 0.5f);

	_SHAtlasR[uint3(id.xy, 0)] = coeff0.r;
	_SHAtlasR[uint3(id.xy, 1)] = coeff1.r;
	_SHAtlasR[uint3(id.xy, 2)] = coeff2.r;
	_SHAtlasR[uint3(id.xy, 3)] = coeff3.r;
	_SHAtlasR[uint3(id.xy, 4)] = coeff4.r;
	_SHAtlasR[uint3(id.xy, 5)] = coeff5.r;
	_SHAtlasR[uint3(id.xy, 6)] = coeff6.r;
	_SHAtlasR[uint3(id.xy, 7)] = coeff7.r;
	_SHAtlasR[uint3(id.xy, 8)] = coeff8.r;

	_SHAtlasG[uint3(id.xy, 0)] = coeff0.g;
	_SHAtlasG[uint3(id.xy, 1)] = coeff1.g;
	_SHAtlasG[uint3(id.xy, 2)] = coeff2.g;
	_SHAtlasG[uint3(id.xy, 3)] = coeff3.g;
	_SHAtlasG[uint3(id.xy, 4)] = coeff4.g;
	_SHAtlasG[uint3(id.xy, 5)] = coeff5.g;
	_SHAtlasG[uint3(id.xy, 6)] = coeff6.g;
	_SHAtlasG[uint3(id.xy, 7)] = coeff7.g;
	_SHAtlasG[uint3(id.xy, 8)] = coeff8.g;

	_SHAtlasB[uint3(id.xy, 0)] = coeff0.b;
	_SHAtlasB[uint3(id.xy, 1)] = coeff1.b;
	_SHAtlasB[uint3(id.xy, 2)] = coeff2.b;
	_SHAtlasB[uint3(id.xy, 3)] = coeff3.b;
	_SHAtlasB[uint3(id.xy, 4)] = coeff4.b;
	_SHAtlasB[uint3(id.xy, 5)] = coeff5.b;
	_SHAtlasB[uint3(id.xy, 6)] = coeff6.b;
	_SHAtlasB[uint3(id.xy, 7)] = coeff7.b;
	_SHAtlasB[uint3(id.xy, 8)] = coeff8.b;
}